<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC
  "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.docbook.org/xml/4.5/docbookx.dtd"
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<section id="cha.obs.admin.components">
 <title>OBS Components</title>
 <para>
  The OBS is not a monolithic server: it consists of multiple daemons that
  fulfill different tasks.
 </para>
 <figure>
  <title>Simplified OBS Component Overview</title>
  <mediaobject>
   <imageobject>
    <imagedata fileref="obs_components.png" width="800" />
   </imageobject>
  </mediaobject>
 </figure>
 <section>
  <title>Frontend</title>
  <para>
   The OBS Frontend is a Ruby on Rails application that manages the access and
   manipulation of the OBS data. It provides a web user interface and an
   application programming interface to do so. Both can be used to create,
   read, update and delete users, projects/packages, requests and other
   objects. It also implements additional sub-systems like authentication,
   search or email notifications.
  </para>
 </section>
 <section>
  <title>Backend</title>
  <para>
   The OBS Backend is a collection of Perl applications that manage the source
   files and build jobs of the OBS.
  </para>
  <section>
   <title>Source Server</title>
   <para>
    Maintains the source repository and project/package configurations. It
    provides an HTTP interface, which is the only interface for the Frontend and
    it may forward requests to further backend services. Each OBS installation
    has one Source Server only. It maintains the "sources", "trees" and
    "projects" directories.
   </para>
  </section>
  <section>
   <title>Repository Server</title>
   <para>
    A repository server provides access to the binaries via an HTTP interface.
    It is used by the frontend via the source server only. Workers are using
    the server for registration, requesting the needed binaries for the build
    jobs and are storing the result. Notifications for schedulers are also
    created by repository servers. Each OBS installation has at least one
    repository servers. A larger installation using partitioning has one on
    each partition.
   </para>
  </section>
  <section>
   <title>Scheduler</title>
   <para>
    A scheduler is calculating the need for build jobs. It detects changes in
    sources, project configurations or in binaries used in the build
    environment. It is responsible for starting jobs in the right order and
    integrating the built binary packages. Each OBS installation has one
    scheduler per available architecture and partition. It maintains the
    content of the "build" directory.
   </para>
  </section>
  <section>
   <title>Dispatcher</title>
   <para>
    The dispatcher takes a job (created by the scheduler) and is assigning it
    to a free worker. It also checks possible build constraints to verify that
    the worker qualifies for the job. It only notifies a worker about a job,
    the worker is downloading the needed resources itself afterwards. Each OBS
    installation has one dispatcher per partition (only one of them is the
    master dispatcher).
   </para>
  </section>
  <section>
   <title>Publisher</title>
   <para>
    The publisher is processing publish events from the scheduler for finished
    repositories. It is merging the build result of all architectures into a
    defined directory structure, creates the needed meta data and may sync it
    to a download server. It maintains the content of the "repos" directory on
    the backend. Each OBS installation has one publisher per partition.
   </para>
  </section>
  <section>
   <title>Worker</title>
   <para>
    The workers register at the repository servers. They receive build jobs
    from the dispatcher. Afterwards they download sources from source server
    and the needed binaries from the repository server(s). They are building
    the package using the build script and sending the result back to the
    repository server. A worker can run on the same host as the other services,
    but most OBS installations have dedicated hardware for the workers.
   </para>
  </section>
  <section>
   <title>Signer</title>
   <para>
    The signer is handling signing events and is calling an external tool to
    execute the signing. Each OBS installation usally has one signer per
    partition and also on the source server installation.
   </para>
  </section>
  <section>
   <title>Warden</title>
   <para>
    The warden is monitoring the workers and detects crashed or hanging
    workers. Their build jobs will be canceled and restarted on another host
    then.  Each OBS installation can have one Warden service running on each
    partition.
   </para>
  </section>
  <section>
   <title>Download on Demand Updater (dodup)</title>
   <para>
    The download on demand updater is monitoring all external repositories
    which are defined as download on demand resources. It is polling for
    changes in the meta data and redownloads the meta data in case. The
    scheduler will be notified to recalculate the build jobs depending on these
    repositories afterwards. Each OBS installation can have one dodup service
    running on each partition.
   </para>
  </section>
  <section>
   <title>Delta Store</title>
   <para>
    The delta store daemon is maintaining the deltas in the source storage.
    Multiple obscpio archives can be stored in one deltastore to avoid
    duplication on disk. This services is calculating the delta and maintains
    the delta store. Each OBS installation can have one delta store process
    running next to the source serv.er
   </para>
  </section>
 </section>
 <section>
  <title>Command Line Client</title>
  <para>
   The Open Build Service Commander (osc) is a Python application with a
   Subversion style command-line interface. It can be used to to manipulate or
   query data from the OBS through its application programming interface.
  </para>
 </section>
 <section>
  <title>Content Delivery Server</title>
  <para>
   The OBS is agnostic about how you serve build results to your users. It will
   just write repositories to disk. But many people sync these repositories to
   some content delivery system like
   <ulink url="http://mirrorbrain.org/">MirrorBrain</ulink>.
  </para>
 </section>
 <section>
  <title>Requirements</title>
  <para>
   We highly recommend, and in fact only test, installations on the
   <ulink url="https://www.suse.com/products/server/">SUSE Linux Enterprise
   Server</ulink> and <ulink url="http://www.opensuse.org">openSUSE</ulink>
   operating systems. However, we are aware that there a few installations on
   debian and fedora systems out there.
  </para>
  <para>
   The OBS also needs a SQL database (MySQL or MariaDB) for persistent and a
   memcache daemon for volatile data.
  </para>
 </section>
</section>
