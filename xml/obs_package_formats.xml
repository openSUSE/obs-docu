<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC
  "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.docbook.org/xml/4.5/docbookx.dtd"
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<chapter id="cha.obs.package_formats">
 <title>Package Formats</title>
 <para>
  OBS differentiates between the format of the build recipes and the format of
  the installed packages. For example, the 'spec' recipe format is used to
  build 'rpm' packages by calling rpmbuild. In most cases the build result
  format is the same as the package format used for setting up the build
  environment, but sometimes the format is different. An example is the 'kiwi'
  recipe format, which builds products and isos, but uses rpm packages to setup
  the build process.
 </para>
 <para>
  OBS currently supports 'rpm', 'deb' (debian), 'arch' as package formats and
  'spec', 'dsc', 'kiwi' (both product and appliances), 'arch',
  'preinstallimage' and 'simpleimage' as recipe formats.
 </para>
 <section>
  <title>Setting up a format</title>
  <para>
   If no recipe format and binary format is specified in the prjconf, OBS tries
   to deduce them from the preinstall list, which includes the name of the used
   package manager. This means that you need to manually configure the 'kiwi'
   recipe config, as a 'rpm' package format will select 'spec' builds as
   default. This configuration is done by adding a 'Type' line to the project
   configuration.
  </para>
 </section>
 <section>
  <title>Recipe Specials</title>
  <para>
   Each format has some specials
  </para>
  <section>
   <title>spec</title>
   <para>
    For building rpms you need a .spec file for each package, containing its
    build description. OBS parses the spec file's BuildRequires lines to get a
    list of package dependencies. OBS uses this information to both build the
    packages in the correct order and also for setting up the build
    environment. The parser understands most of rpm's macro handling, so it's
    possible to use architecture specific BuildRequires, conditional builds and
    other advanced rpm features.
   </para>
  </section>
  <section>
   <title>deb</title>
   <para>
    To build *.deb files, which are used on debian-based distributions, you
    need the following files:
    <itemizedlist>
     <listitem>
      <simpara>
debian.control
       </simpara>
     </listitem>
    </itemizedlist>
    Here are the meta informations for the package like the build dependencies
    or some description.
    <itemizedlist>
     <listitem>
      <simpara>
debian.rules
       </simpara>
     </listitem>
    </itemizedlist>
    This file describes the build section of the deb building process. There
    are the configure and make compile commands including other deb building
    sections.
    <itemizedlist>
     <listitem>
      <simpara>
$PACKAGE.dsc
       </simpara>
     </listitem>
    </itemizedlist>
    In this file you describe the package names of each subpackage and their
    dependency level. Unlike rpm, the release numbers do not get increased
    automatically during build unless the keyword DEBTRANSFORM-RELEASE gets
    added to the file.
   </para>
  </section>
  <section>
   <title>pkg</title>
   <para>
    This package format is for Archlinux and his derivates. To build a
    Archlinux pkg you need a PKGBUILD file containing the build description and
    the source tarball. PKGBUILD's have no macros like %{buildroot}. They have
    variables for example makedepens=(package1, package2). This variables are
    parsed by the OBS and uses them as dependencies. On Archlinux you typically
    build packages without subpackage. They are no *-dev oder *-devel packages.
   </para>
  </section>
  <section id="_kiwi_appliance" >
   <title>kiwi appliance</title>
   <para>
    <ulink url="http://opensuse.github.io/kiwi/">KIWI</ulink> is an image producing
    platform that builds images for various formats, starting from hardware images,
    virtualization systems like QEMU, XEN and VMWare and many more.
    It supports a wide range of architecure, which are x86, x86_64, s390 and ppc.
   </para>
   <para>
    Build instructions for KIWI usually consists of:
    <itemizedlist>
     <listitem>
      <simpara>
       <command>my_image.kiwi</command> contains the image configuration in xml format.
       Full XML schema documentation can be found
       <ulink url="https://doc.opensuse.org/projects/kiwi/schema-doc/">here</ulink>.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <command>config.sh (optional)</command> configuration script that runs at
       the end of the installation, but before package scripts have run.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <command>root/</command> directory that contains files that will be applied
       to the built image after package installation. This can also be an archived
       and compressed directory.
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
   <note>
    <para>
     OBS only accepts files with a <filename class="extension">.kiwi</filename> suffix as a KIWI configuration file. Other
     naming schemes KIWI supports, like the 'config.xml', are getting ignored in OBS.
    </para>
   </note>
   <para>
    Please refer to the <ulink url="https://doc.opensuse.org/projects/kiwi/doc/">
    KIWI cookbook</ulink> for indepth guidance for building images with KIWI.
   </para>
  </section>
  <section>
   <title>simpleimage</title>
   <para>
    This format can be used to get simple rootfs tarball or squashfs image. It
    doesn't contain bootloader nor kernel. For advanced features, use kiwi. Use
    simpleimage for simple rootfs tarball/squashfs image of any distribution
    that is supported by OBS but doesn't have anything fancier than that.
   </para>
   <para>
    Simple image uses similar syntax as spec file. Supported tags include Name,
    Version and BuildRequires which is the way how to specify list of packages
    to include. #!BuildIgnore can be also used. For additional customization
    %build phase is supported - run via bash. RPM macros are not supported, but
    $SRCDIR shell variable is available.
   </para>
   <section>
    <title>Example</title>
<screen> 
          <command> 
Name:           example-image
Version:        1.0
BuildRequire:   emacs
#!BuildIgnore:  gcc-c++

%build
# Set root password
passwd &lt;&lt; EOF
opensuse
opensuse
EOF

# Enable ssh
systemctl enable sshd

          </command> 
        </screen>
   </section>
  </section>
 </section>
</chapter>
