<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC
  "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.docbook.org/xml/4.5/docbookx.dtd"
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<chapter id="cha.obs.best-practices.upstream" os="opensuse;novell">
 <title>Publishing upstream binaries</title>
 <para>
  This chapter covers main step of using OBS to publish binaries of your
  project for multiple distributions.
 </para>
 <section>
  <title>Which instance to use?</title>
  <section>
   <title>Private OBS instance</title>
   <para>
    OBS is open source project and therefore you can setup your own instance
    and run it by your own. The main advantage of this approach is that you can
    keep all your sources and recepies unpublished if you need to (for example
    because of NDA). Obvious downside of this approach is that you need to
    maintain your own server/servers for running builds, publishing and
    mirroring. Also making your project public may attract some potentional
    contributors.
   </para>
   <para>
    More information about setting up your own private OBS instance can be
    found in <xref linkend="cha.obs.best-practices.localsetup"/> .
   </para>
  </section>
  <section>
   <title>openSUSE Build Service</title>
   <para>
    Other option is to use some publically available instance of OBS. One good
    example is openSUSE Build Service -
    <ulink
    url="http://build.opensuse.org"/> . This OBS instance can be
    used by anybody to freely create binaries for any of the supported
    distributions. Big advanatage is that somebody is already taking care of
    all the infrastructure. You can store your sources there, build your
    packages and got them mirrored around the world. You don't need to get your
    own server a configure it, you can start using it right a way.
   </para>
  </section>
 </section>
 <section>
  <title>Where to place your project?</title>
  <para>
   This part helps you to decide on how to name and where to place your project
   and what project structure to create. This is more important if you are
   sharing your OBS instance with other people like in
   <ulink
    url="http://build.opensuse.org">openSUSE Build Service</ulink>.
  </para>
  <section>
   <title>Base project</title>
   <para>
    If there are more packages in OBS, like for example in
    <ulink
      url="http://build.opensuse.org">openSUSE Build
    Service</ulink>, these packages needs to be somehow divided into projects
    so it is easier to find what people are looking for and it isn't all just
    one big mess.
   </para>
   <para>
    In openSUSE Build Service, packages are divided into categories regarding
    their function. MySQL is in <emphasis>server:database</emphasis>
    repository, lighttpd in <emphasis>server:http</emphasis> and for example
    KMyMoney has its own subproject in <emphasis>KDE:Apps</emphasis>. So it is
    a good idea to think about in what category available on the OBS your
    application will fit the best.
   </para>
   <para>
    If you need whole project for yourself - for example some of your
    dependencies is being built in the same project, you need to request
    creating subproject. In openSUSE Build Service, this is done through asking
    OBS admins for it on
    <ulink
    url="mailto:opensuse-buildservice+subscribe@opensuse.org">opensuse-buildservice
    mailing list </ulink>. Its archive and link for subscribing can be found
    at <ulink url="http://lists.opensuse.org/opensuse-buildservice/"/> .
   </para>
   <para>
    If you need to just put yout package somewhere, you can create it in your
    home project and then send submitrequest to the project you want your
    packge to get included in.
   </para>
  </section>
  <section>
   <title>More supported versions?</title>
   <para>
    If you want to support more than just one version of your program, you will
    need to use several projects for that. There can't be same packages with.
   </para>
   <section>
    <title>Stable and development version</title>
    <para>
     Let's asume that you have found project suitable for your program. Some
     projects already have something like <emphasis>STABLE</emphasis> and
     <emphasis>UNSTABLE</emphasis> subprojects. So you can use these, if you
     discuss it with maintainers of these project. Other way is to ask somebody
     from the maintainers of the project to create either these subprojects (if
     they don't exists) or something similar. Always try to discuss it with the
     maintainers of the project. They might have good ideas, sugestions and may
     help you in various ways.
    </para>
   </section>
   <section>
    <title>Multiple stable versions</title>
    <para>
     If you want to support multiple version, you would need more projects then
     just two as suggested in previous section. These special project should
     contain version they are supposed to support in their name. If you are
     creating them under some project you are sharing with other packages,
     having you package name in the name of projects is a good idea as well.
     Good example can be Gnome. It has <emphasis>GNOME</emphasis> project and
     many subprojects projects. Among them are for example
     <emphasis>GNOME:STABLE:2.30</emphasis>,
     <emphasis>GNOME:STABLE:2.32</emphasis> and
     <emphasis>GNOME:STABLE:3.0</emphasis>. These projects holds different
     stable versions of Gnome with latest fixes.
    </para>
   </section>
  </section>
 </section>
 <section>
  <title>Creating a package</title>
  <para>
   Packaging is quite a complex topic. Instead of trying to cover it in this
   book, it is a good idea to start with available internet documentation. One
   of the recomended online resource is Portal:Packaging on openSUSE wiki. You
   can find it at <ulink url='http://en.opensuse.org/Portal:Packaging'/>. It
   contains links to several packaging tutorials and other packaging related
   documentation.
  </para>
 </section>
 <section>
  <title>Getting binaries?</title>
  <note>
   <para>
    This sections discuss feature available only in openSUSE Build Service -
    one of the freely availble instances of OBS.
   </para>
  </note>
  <para>
   If you want a nice download page for your software published on openSUSE
   Build Service, you can use openSUSE download page. You can include it for
   example using either
   <code>iframe</code>
   or
   <code>object</code>
   on newer webs . Example of download page can be following one
   <ulink
   url='http://software.opensuse.org/download.html?project=openSUSE:Tools&amp;package=osc'/>.
   You can see how it looks like in
   <xref
   linkend="cha.obs.best-practices.upstream.download.screenshot"/>. It
   contains links to the packages and instructions how to install them.
  </para>
  <figure id="cha.obs.best-practices.upstream.download.screenshot">
   <title>openSUSE download page for package from OBS</title>
   <mediaobject>
    <imageobject>
     <imagedata fileref="download_page_screenshot.png" width="800" />
    </imageobject>
   </mediaobject>
  </figure>
  <para>
   Url always has to start with
   <ulink
   url='http://software.opensuse.org/download.html?'/>.You can attach
   any number of '&amp;'-separated parameters. But at least two of them -
   <emphasis>project</emphasis> and <emphasis>package</emphasis> - are
   required. All parameters with descriptions can be found in
   <xref
   linkend="cha.obs.best-practices.upstream.download.params"/>.
  </para>
  <table id='cha.obs.best-practices.upstream.download.params'>
   <title>Possible parameters for download page</title>
   <tgroup cols='2' align='left'>
    <thead>
     <row>
      <entry>parameter</entry>
      <entry>description</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <code>project</code>
      </entry>
      <entry>Project in which your package is located</entry>
     </row>
     <row>
      <entry>
       <code>package</code>
      </entry>
      <entry>Name of your package as it is specified in OBS</entry>
     </row>
     <row>
      <entry>
       <code>bcolor</code>
      </entry>
      <entry>
       Background color in hexa (for example <code>bcolor=004</code>) to make
       the download page better match your project page
      </entry>
     </row>
     <row>
      <entry>
       <code>fcolor</code>
      </entry>
      <entry>
       Text color in hexa (for example <code>fcolor=fff</code>) to make the
       download page better match your project page
      </entry>
     </row>
     <row>
      <entry>
       <code>acolor</code>
      </entry>
      <entry>
       Link color in hexa (for example <code>acolor=ff0</code>) to make the
       download page better match your project page
      </entry>
     </row>
     <row>
      <entry>
       <code>hcolor</code>
      </entry>
      <entry>
       Highlight color in hexa (for example <code>hcolor=0ff</code>) to make
       the download page better match your project page
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  <section>
   <title>Examples</title>
   <para>
    Now we will take a look at how to include the download page into your
    project pages. As example we will use <emphasis>osc</emphasis> client from
    <emphasis>openSUSE:Tools</emphasis> project. To demonstrate the colors
    change, we will use theme that would match Midnight Commander.
   </para>
   <para>
    First we will start with recent web page supporting new standarts. On such
    a website, we would use
    <code>object</code>
    to include download code:
   </para>
<screen>
  <command><![CDATA[
<object type="text/html" 
   data="http://software.opensuse.org/download.html?project=openSUSE:Tools&amp;package=osc&amp;bcolor=004&amp;acolor=ff0&amp;fcolor=fff&amp;hcolor=0ff"
   width="100%" height="100%">
   <param name="src" 
      value="http://software.opensuse.org/download.html?project=openSUSE:Tools&amp;package=osc&amp;bcolor=004&amp;acolor=ff0&amp;fcolor=fff&amp;hcolor=0ff" />
   Your browser doesn't support objects, please continue to the
   <a href="http://software.opensuse.org/download.html?project=openSUSE:Tools&amp;package=osc&amp;bcolor=004&amp;acolor=ff0&amp;fcolor=fff&amp;hcolor=0ff">
   download page</a>
</object>
  ]]></command>
  </screen>
   <para>
    If you are using php on your server, you can make it easier by using
    following code:
   </para>
<screen>
  <command><![CDATA[
<?php
   $url = "http://software.opensuse.org/download.html?project=openSUSE:Tools&amp;package=osc&amp;bcolor=004&amp;acolor=ff0&amp;fcolor=fff&amp;hcolor=0ff";
   echo '
<object type="text/html" 
   data="' . $url . '"
   width="100%" height="100%">
   <param name="src" 
      value="' . $url . '" />
   Your browser doesn't support objects, please continue to the
   <a href="' . $url . '">download page</a>
</object>
';
?>
  ]]></command>
  </screen>
   <para>
    If you are running some legacy website, you might have to use
    <code>iframe</code>
    :
   </para>
<screen>
  <command><![CDATA[
  <iframe src="http://software.opensuse.org/download.html?project=openSUSE:Tools&amp;package=osc&amp;bcolor=004&amp;acolor=ff0&amp;fcolor=fff&amp;hcolor=0ff"/>
  ]]></command>
  </screen>
  </section>
 </section>
</chapter>
