<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.1" xml:id="cha.obs.building"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Building Package Formats</title>
 <info>
  <abstract>
   <para>
    <remark>TBD</remark>
   </para>
  </abstract>
 </info>
 <remark>toms 2017-08-18: Also integrate content from obs_build_containers.xml</remark>
 
 <sect1 xml:id="sec.obs.building.spec2rpm">
  <title>From Spec Files (RPM)</title>
  <para>
   To create an RPM package, you need:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     the spec file which is the build recipe
    </para>
   </listitem>
   <listitem>
    <para>
     a file with the extension <filename class="extension">.changes</filename>
     that can be used to document the package history
    </para>
   </listitem>
   <listitem>
    <para>the original source archive</para>
   </listitem>
   <listitem>
    <para>
     optional patches which changes the original source code to fix problems
     regarding security, the build process, or other issues
    </para>
   </listitem>
   <listitem>
    <para>
     other files which do not fall into one of the previous categories
    </para>
   </listitem>
  </itemizedlist>
  <para>
   For existing packages, this is already the case. To build an
   existing package, the general procedure is as follows:</para>
  <procedure>
   <step>
    <para>
     If you have not done so yet, set up your project as shown in
     <xref linkend="sec.obs.basicworkflow.setuphome"/>.
    </para>
   </step>
   <step>
    <para>
     In the terminal, choose or create a directory on a local partition that
     has enough space to hold the package sources.
    </para>
   </step>
   <step>
    <para>
     Check out the project that contains the package:
    </para>
    <screen>&prompt.user;<command>osc</command> checkout <replaceable
     >PROJECT</replaceable> <replaceable>PACKAGE</replaceable></screen>
    <para>
     This creates a <filename><replaceable
     >PROJECT</replaceable>:<replaceable>PACKAGE</replaceable></filename>
     directory in the current directory.
    </para>
   </step>
   <step>
    <para>
     Change the directory:
    </para>
    <screen>&prompt.user;<command>cd</command> <replaceable
     >PROJECT</replaceable>:<replaceable>PACKAGE</replaceable></screen>
   </step>
   <step>
    <para>
     Decide for which build target (for example &opensuse; Tumbleweed for
     x86_64), you want to create the RPM package and execute:
    </para>
    <screen>&prompt.user;<command>osc</command> build openSUSE:Tumbleweed x86_64 *.spec</screen>
   </step>
   <step>
    <para>
     Inspect the build process.
    </para>
    <variablelist>
     <varlistentry>
      <term>Successful Build</term>
      <listitem>
<!--       <para></para>-->
       <screen>[   15s] RPMLINT report:
[   15s] ===============
[   16s] 2 packages and 0 specfiles checked; 0 errors, 0 warnings.
[   16s]
[   16s]
[   16s] &wsII; finished "build <replaceable>PACKAGE</replaceable>.spec" at Fri Sep  1 11:54:31 UTC 2017.
[   16s]

/var/tmp/build-root/openSUSE_Tumbleweed-x86_64/home/abuild/rpmbuild/SRPMS/<replaceable
 >PACKAGE</replaceable>-<replaceable>VERSION</replaceable>-0.src.rpm

/var/tmp/build-root/openSUSE_Tumbleweed-x86_64/home/abuild/rpmbuild/RPMS/noarch/<replaceable>PACKAGE</replaceable>-<replaceable>VERSION</replaceable>-0.noarch.rpm</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Unsuccessful Build</term>
      <listitem>
<!--       <para></para>-->
       <screen>[    8s] &wsII; failed "build <replaceable>PACKAGE</replaceable>.spec" at Fri Sep  1 11:58:55 UTC 2017.
[    8s]

The buildroot was: /var/tmp/build-root/openSUSE_Tumbleweed-x86_64</screen>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     A successful build ends always with the creation of the RPM and SRPM
     files.
    </para>
   </step>
   <step>
    <para>
     For a detailed log, see the file
     <filename>/var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.log</filename>.
    </para>
   </step>
  </procedure>
 </sect1>

 <sect1 condition="tbd">
  <title>From CONTROL/RULES/DSC Files (Debian)</title>
  <para/>
  <remark>TBD</remark>
 </sect1>

 <sect1 condition="tbd">
  <title>From <filename>PKGBUILD</filename> Files (Arch)</title>
  <para/>
  <remark>TBD</remark>
 </sect1>

 <sect1 condition="tbd">
  <title>As Snap Containers</title>
  <remark>toms 2017-08-18: see https://snapcraft.io/docs/build-snaps/ci-integration</remark>
  <para/>
  <remark>TBD</remark>
 </sect1>

 <sect1 condition="tbd">
  <title>As Livebuild Images</title>
  <remark>toms 2017-08-18: see https://www.debian.org/devel/debian-live/</remark>
  <para/>
  <remark>TBD</remark>
 </sect1>

 <sect1 condition="tbd">
  <title>From Kiwi Files (&kiwi;)</title>
   <!--
    1. Create a repository in a project
       - enable all architectures
       - no other repo needed as defined in KIWI's XML config file
    2. Create project config, setting repo to
       - Type: kiwi
       - Repotype: none
    3. Create a package
    4. Submit adapted KIWI config files
    
    Things to watch for:
    * config.xml needs to have a .kiwi suffix
    * Repos needs to be specified as obs://$PROJECT/$REPO
    * Content of root directory as root.tar.bz2
    * If you get the error "have choice", select a package and add it to
      the package list
    * 
   -->
  <para/>
  <remark>TBD</remark>
 </sect1>

 <sect1 condition="tbd">
  <title>As &obs.pimg;</title>
  <remark>toms 2017-08-18: integrate content from  obs_build_preinstall.xml;
  using a _preinstallimage file</remark>
 </sect1>

 <sect1 xml:id="sec.obs.building.appimage">
  <title>As &obs.ai;</title>
  <para>
   To create an &obs.ai;, you need:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     an <filename>appimage.yml</filename> file which acts as a build recipe.
    </para>
   </listitem>
   <listitem>
    <para>
     everything else you need to build a RPM package (see <xref
      linkend="sec.obs.building.spec2rpm"/>).
    </para>
   </listitem>
   <listitem>
    <para>
     an optional <filename>_service</filename> file if you integrate the
     source code from a version control system.
    </para>
   </listitem>
   <listitem>
    <para>
     configuration in your &obsa; project, see <xref linkend="pro.obs.building.appimage"/>.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   There are three ways to build an &obs.ai;:
  </para>
  <itemizedlist>
   <listitem>
    <para>From RPM packages, or</para>
   </listitem>
   <listitem>
    <para>directly from source code, or</para>
   </listitem>
   <listitem>
    <para>a combination of the previous two methods.</para>
   </listitem>
  </itemizedlist>
  <para>To build a new &obs.ai; from RPM packages, proceed as follows:</para>
  <procedure xml:id="pro.obs.building.appimage">
   <title>Building &obs.ai; from RPM Packages</title>
   <step>
    <para>
     Build RPM packages as described in <xref
      linkend="sec.obs.building.spec2rpm"/>. Make sure the packages have
     been built successfully.
    </para>
   </step>
   <step>
    <para>
     Prepare your project to support &obs.ai;. In this example, we
     use the home project <uri>&obshome1;</uri>:
    </para>
    <substeps>
     <step>
      <para>
       To open the meta configuration, run:
      </para>
      <screen>&prompt.user;<command>osc</command> meta prj -e &obshome1;</screen>
      <para>
       <remark>toms 2017-09-05: Maybe this step should be explained in
       a separate section/procedure?</remark>
       To use the Web interface of your &obsa; instance to do
       the same, go to your home project and click <menuchoice>
        <guimenu>Advanced</guimenu>
        <guimenu>Meta</guimenu>
       </menuchoice>.
      </para>
     </step>
     <step>
      <para>
       To enable &obs.ai; support, add the following XML snippet into the editor:
      </para>
      <screen language="xml">&lt;repository name="AppImage">
  &lt;path project="&obshome1;" repository="<replaceable>PROJECT</replaceable>"/>
  &lt;path project="OBS:AppImage" repository="AppImage"
  &lt;arch>x86_64&lt;/arch>
  &lt;!-- &lt;arch>i586&lt;/arch> -->
&lt;/repository></screen>
      <para>
       The <uri>OBS:AppImage</uri> project is specific to &osbs;.
      </para>
     </step>
     <step>
      <para>
       Adapt the <replaceable>PROJECT</replaceable> placeholder and the
       architecture.
      </para>
     </step>
     <step>
      <para>
       Save the configuration<!--, use <keycombo>
        <keycap>:</keycap>
        <keycap>x</keycap>
       </keycombo> or leave the editor with <keycombo>
        <keycap>:</keycap>
        <keycap>q</keycap>
        <keycap>!</keycap>
       </keycombo>-->.
      </para>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     Create a <filename>appimage.yml</filename> with the following
     content:
    </para>
    <example>
     <title>&obs.ai; from RPM Files (<filename>appimage.yml</filename>)</title>
     <screen language="yaml">app: <replaceable>APPNAME</replaceable> <co xml:id="co.obs.building.ai.app"/>

build: <co xml:id="co.obs.building.ai.build"/>
  packages:
    - linuxdeployqt <co xml:id="co.obs.building.ai.linuxdeployqt" condition="tbd"/>

ingredients: <co xml:id="co.obs.building.ai.ingredients"/>
  packages:
    - <replaceable>MY_RPM_PACKAGE</replaceable>

script: <co xml:id="co.obs.building.ai.script"/>
  # instructions
     </screen>
     <calloutlist>
      <callout arearefs="co.obs.building.ai.app">
       <para>
        <remark>toms 2017-09-05: any restrictions in naming?</remark>
        Contains the name of &obs.ai; application. You can use any name you want,
        but we recommend using lowercase names.
       </para>
      </callout>
      <callout arearefs="co.obs.building.ai.build">
       <para>Defines the build requirements using RPM package names.</para>
      </callout>
      <callout arearefs="co.obs.building.ai.linuxdeployqt" condition="tbd">
       <para>
        <remark>toms 2017-09-07: is this package always needed? What's it's purpose?</remark>
       </para>
      </callout>
      <callout arearefs="co.obs.building.ai.ingredients">
       <para>
        Defines the installation requirements for the &obs.ai;. These
        packages are installed into the &obs.ai; build root environment.
       </para>
      </callout>
      <callout arearefs="co.obs.building.ai.script">
       <para>
        Contains installation instructions.
        <remark>toms 2017-09-04: FIXME: add more information</remark>
       </para>
      </callout>
     </calloutlist>
    </example>
   </step>
   <step>
    <para>Build the &obs.ai;:</para>
    <screen>&prompt.user;<command>osc</command> build AppImage x86_64 appimage.yml</screen>
   </step>
   <step>
    <para>
     Retrieve the new &obs.ai; from the <filename class="directory"
      >/var/tmp/build-root/AppImage-x86_64/usr/src/packages/OTHER/</filename>
     directory under der name <filename><replaceable
      >APPNAME</replaceable>-<replaceable
       >VERSION</replaceable>-<replaceable
        >LIBRARY</replaceable>-<replaceable
         >ARCH</replaceable>.AppImage</filename>.
    </para>
   </step>
  </procedure>
  <para>
   To build &obs.ai;s from source, change the
   <filename>appimage.yml</filename> file as follows:
  </para>
  <example>
   <title>&obs.ai; from Source File (<filename>appimage.yml</filename>)</title>
   <screen language="yaml">app: <replaceable>APPNAME</replaceable>

build:
  packages:
    - linuxdeployqt
    - cmake
  git:
    - &gitupstream1;.git

script:
   - cmake -DCMAKE_INSTALL_PREFIX=/usr .
   - make
   - make install DESTDIR=/usr
   # other lines suppressed</screen>
  </example>
  <remark>toms 2017-09-05: do we need a _service file?</remark>
 </sect1>
</chapter>
