<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.1" xml:id="cha.obs.building"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Building Package Formats</title>
 <info>
  <abstract>
   <para>
    <remark>TBD</remark>
   </para>
  </abstract>
 </info>
 <remark>toms 2017-08-18: Also integrate content from obs_build_containers.xml</remark>
 
 <sect1 xml:id="sec.obs.building.spec2rpm">
  <title>From Spec Files (RPM)</title>
  <para>
   To create an RPM package you need:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     the spec file
    </para>
   </listitem>
   <listitem>
    <para>
     a file with the extension <filename class="extension">.changes</filename>
    </para>
   </listitem>
   <listitem>
    <para>the original source archive</para>
   </listitem>
   <listitem>
    <para>
     optional patches
    </para>
   </listitem>
   <listitem>
    <para>
     other files which does not fall into one of the previous categories
    </para>
   </listitem>
  </itemizedlist>
  <para>
   For existing packages, this is already the case. To build an
   existing package, the general procedure is as follows:</para>
  <procedure>
   <step>
    <para>
     If you have not done yet, set up your project as shown in
     <xref linkend="sec.obs.basicworkflow.setuphome"/>.
    </para>
   </step>
   <step>
    <para>
     In the terminal, choose or create a directory on a local partition that
     has enough space to hold the package sources.
    </para>
   </step>
   <step>
    <para>Check out the project where the package is contained:</para>
    <screen>&prompt.user;<command>osc</command> checkout <replaceable
     >PROJECT</replaceable> <replaceable>PACKAGE</replaceable></screen>
    <para>
     This creates a <filename><replaceable
     >PROJECT</replaceable>:<replaceable>PACKAGE</replaceable></filename>
     directory in the current directory.
    </para>
   </step>
   <step>
    <para>
     Change the directory:
    </para>
    <screen>&prompt.user;<command>cd</command> <replaceable
     >PROJECT</replaceable>:<replaceable>PACKAGE</replaceable></screen>
   </step>
   <step>
    <para>
     Decide for which build target (for example &opensuse; Tumbleweed for
     x86_64) you want to create the RPM package and execute:
    </para>
    <screen>&prompt.user;<command>osc</command> build openSUSE:Tumbleweed x86_64 *.spec</screen>
   </step>
   <step>
    <para>
     Inspect the build process.
    </para>
    <variablelist>
     <varlistentry>
      <term>Successful Build</term>
      <listitem>
<!--       <para></para>-->
       <screen>[   15s] RPMLINT report:
[   15s] ===============
[   16s] 2 packages and 0 specfiles checked; 0 errors, 0 warnings.
[   16s]
[   16s]
[   16s] &wsII; finished "build <replaceable>PACKAGE</replaceable>.spec" at Fri Sep  1 11:54:31 UTC 2017.
[   16s]

/var/tmp/build-root/openSUSE_Tumbleweed-x86_64/home/abuild/rpmbuild/SRPMS/<replaceable
 >PACKAGE</replaceable>-<replaceable>VERSION</replaceable>-0.src.rpm

/var/tmp/build-root/openSUSE_Tumbleweed-x86_64/home/abuild/rpmbuild/RPMS/noarch/<replaceable>PACKAGE</replaceable>-<replaceable>VERSION</replaceable>-0.noarch.rpm</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Build ended with Error</term>
      <listitem>
<!--       <para></para>-->
       <screen>[    8s] &wsII; failed "build <replaceable>PACKAGE</replaceable>.spec" at Fri Sep  1 11:58:55 UTC 2017.
[    8s]

The buildroot was: /var/tmp/build-root/openSUSE_Tumbleweed-x86_64</screen>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     A successful build ends always with the creation of the RPM and SRPM
     files.
    </para>
   </step>
   <step>
    <para>
     If you need a detailed log for further inspection, look into the file
     <filename>/var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.log</filename>.
    </para>
   </step>
  </procedure>
 </sect1>

 <sect1 condition="tbd">
  <title>From CONTROL/RULES/DSC Files (Debian)</title>
  <para/>
  <remark>TBD</remark>
 </sect1>

 <sect1 condition="tbd">
  <title>From <filename>PKGBUILD</filename> Files (Arch)</title>
  <para/>
  <remark>TBD</remark>
 </sect1>

 <sect1 condition="tbd">
  <title>As Snap Containers</title>
  <remark>toms 2017-08-18: see https://snapcraft.io/docs/build-snaps/ci-integration</remark>
  <para/>
  <remark>TBD</remark>
 </sect1>

 <sect1 condition="tbd">
  <title>As Livebuild Images</title>
  <remark>toms 2017-08-18: see https://www.debian.org/devel/debian-live/</remark>
  <para/>
  <remark>TBD</remark>
 </sect1>


 <sect1 condition="tbd">
  <title>From Kiwi Files (&kiwi;)</title>
   <!--
    1. Create a repository in a project
       - enable all architectures
       - no other repo needed as definied in KIWI's XML config file
    2. Create project config, setting repo to
       - Type: kiwi
       - Repotype: none
    3. Create a package
    4. Submit adapted KIWI config files
    
    Things to watch for:
    * config.xml needs to have a .kiwi suffix
    * Repos needs to be specified as obs://$PROJECT/$REPO
    * Content of root directory as root.tar.bz2
    * If you get the error "have choice", select a package and add it to
      the package list
    * 
   -->
  <para/>
  <remark>TBD</remark>
 </sect1>

 <sect1 condition="tbd">
  <title>As &obs.pimg;</title>
  <remark>toms 2017-08-18: integrate content from  obs_build_preinstall.xml;
  using a _preinstallimage file</remark>
 </sect1>
 
</chapter>
