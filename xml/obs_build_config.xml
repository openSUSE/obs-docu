<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.1" xml:id="cha.obs.prjconfig"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink" >
 <title>Project Configuration</title>
 <info/>

 <sect1 xml:id="sec.prjconfig.about">
  <title>About the Project Configuration</title>
  <para>
   Each project has a <firstterm>project configuration</firstterm> which
   defines the setup of the build system. Usually it is empty and you do
   not need to change anything. However, when you change it, it can be
   used for the following reasons:
  </para>
  <remark>toms 2017-08-18: Add more reasons why it is needed</remark>
  <itemizedlist>
   <listitem>
    <para>
     Handle compatibility layers. <remark>toms 2017-08-18: more info needed!</remark>
    </para>
   </listitem>
   <listitem>
    <para>
     Switch on or off certain features during the build.
    </para>
   </listitem>
   <listitem>
    <para>
     Decide which package is installed during build if there are circular
     dependencies.
    </para>
   </listitem>
   <listitem>
    <para>
     Handle user decisions like package providing the same or special
     macros, packages, or flags in the build environment.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   To view the project configuration, use one of the following methods
  </para>
  <itemizedlist>
   <listitem>
    <formalpara>
     <title>With &osccmd;</title>
     <para>Use <command>osc meta prjconf</command> in your working directory
     of your project.</para>
    </formalpara>
    <remark>toms 2017-08-22: FIXME what's the difference between
     "osc meta prjconf PROJECT" and "osc buildconfig PROJECT PACKAGE"?</remark>
   </listitem>
   <listitem>
    <formalpara>
     <title>In the &obsa; Web UI</title>
     <para>Via the <guimenu>Project Config</guimenu> tab.</para>
    </formalpara>
   </listitem>
   <listitem>
    <formalpara>
     <title>From the Local Build System</title>
     <para>Open one of the files in <filename>/usr/lib/build/configs/*.conf</filename>
     to see one of the default configurations that is being used.</para>
    </formalpara>
    <remark>toms 2017-08-22: should that be mentioned?</remark>
   </listitem>
   <listitem>
    <formalpara>
     <title>With the &obsa; API</title>
     <para>Reachable via the <uri>/source/<replaceable>PROJECT</replaceable>/_config</uri> path.</para>
    </formalpara>
   </listitem>
  </itemizedlist>
 </sect1>

 <sect1 xml:id="sec.prjconfig.syntax">
  <title>Configuration File Syntax</title>
  <para>
   The syntax is basically the same than in RPM spec files.
   However, it is independent of the used packaging format.
   The project configuration is parsed by &obsa;.
   This means, you can use RPM features like macros or conditions in the
   configuration. All lines have the form:</para>
  <screen>keyword: arguments</screen>
  <para>
   In the following list, the placeholder <replaceable>PACKAGES</replaceable>
   indicates <remark>toms 2017-08-18: a list of package names, separated
   by colons(?) or spaces(?)</remark> a package base name.
   For example, as a package name you need the base name like
   <package>gcc</package> but not the full name as in
   <package>gcc-1.2.3.i386.rpm</package>.
   <remark>toms 2017-08-18: What does the following sentence mean?
   "&lt;PACKAGES&gt; mean binary package provides, but not the full file
   name. For example gcc, but not gcc-1.2.3.i386.rpm. Provides of a package can
   not be used either."</remark>
  </para>

  <para>
   The following list contains a list of allowed keywords in the project
   configuration:
  </para>
  <variablelist xml:id="vl.prjconfig.keywords">
   <title>Available Keywords in Project Configuration</title>
   <varlistentry>
    <term><parameter>BinaryType: <replaceable>TYPE</replaceable></parameter> (OBS 2.4 or later)</term>
    <listitem>
     <para>
      Binary type. This is the format of the files which will be the
      result of the build jobs. This gets usually set depending on the build
      recipe type. In some situations, for example a &kiwi; build job result
      gets converted into an rpm, it can be used to overwrite it. Possible
      values are: rpm, deb or none.
     </para>
     <para>
      Sets the binary format used to set up the build
      environment. For example a package with spec build description may use
      and generate deb packages instead of rpms. If no binary type is
      specified, OBS deduces it from the build recipe type. If the recipe type is
      also not set, OBS looks at the Preinstall package list for a hint.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>BuildEngine: <replaceable>ENGINE</replaceable></parameter></term>
    <listitem>
     <para> Use an alternative build engine. This is still chained inside of
      the build script for security reasons. Alternatives are mock (for Fedora
      and Red Hat) and debootstrap (for Debian). This will avoid differences in
      the build environment setup, but it will also have an effect on speed and
      reduced features. It should only be used when you want to emulate the
      distribution build. debbuild engine will build deb files out of a spec
      file description. It can be used by the following definition inside of
      the project build config:</para>
     <screen>Repotype: debian
Type: spec
Binarytype: deb
BuildEngine: debbuild
Support: pax
Support: debbuild
Keep: debbuild</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>BuildFlags: <replaceable>FLAG</replaceable>:<replaceable>VALUE</replaceable></parameter></term>
    <listitem>
     <para>
      The <parameter>BuildFlags</parameter> keyword defines flags for the
      build process. The following values for FLAG are usable. All flags with
      a leading collon(:) requires an additional parameter directly behind.</para>
     <variablelist>
      <varlistentry>
       <term><parameter>vmfstype:</parameter></term>
       <listitem>
        <para>Defines a specific file system when building inside of a VM. </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>kiwiprofile:</parameter></term>
       <listitem>
        <para>builds the selected profile in &kiwi; appliance builds. </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>logidlelimit:</parameter></term>
       <listitem>
               <para>Build jobs which don't create any output get aborted after some time. This flag can be used
                     to modify the limit. Specify the seconds behind flag. </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>excludebuildbuild:</parameter></term>
       <listitem>
               <para>Exclude a package from building. _multibuild flavors can be specified via package:flavor syntax.</para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>onlybuild:</parameter></term>
       <listitem>
               <para>DANGER: this may remove many build results when introduced the first time!
                       It can be used to maintain a whitelist of packages to be build. All other packages
                       will turn to excluded state.</para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>useccache:</parameter></term>
       <listitem>
           <para>Configure usage of ccache for build of packages mentioned by VALUE. Ccache package will be automatically
               installed and configured. The directory <filename>/.ccache/</filename> will be configured as cache dir.
               To configure ccache, the file <filename>/.ccache/ccache.conf</filename> can be modified as part of the build process by the <envar>$BUILD_USER</envar> environment variable. </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Constraint: <replaceable>SELECTOR</replaceable> <replaceable>STRING</replaceable></parameter> (OBS 2.4 or later)</term>
    <listitem>
     <para>
      Define build constraints for build jobs. The selector is a
      colon-separated list which gets a string assigned. See the build job
      constraints page for details.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>ExpandFlags: <replaceable>FLAG</replaceable></parameter></term>
    <listitem>
     <para>
      Flags which modify the behaviour during dependency resolution.
     </para>
      <variablelist>
       <varlistentry>
        <term><parameter>unorderedimagerepos</parameter> (OBS 2.10 or later)</term>
        <listitem>
                <para>The priority of repositories defined in an image build is usually important. This is to avoid switching repositories
                      when the same package is available in multiple repositories. However, it might be wanted to ignore that and just
                      pick the highest version. This can be achieved by defining this flag</para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><parameter>preinstallexpand</parameter></term>
        <listitem>
                <para>EXPERIMENTAL: Preinstall also all dependencies of a preinstalled package.
                      This may increase the amount of preinstalled packages a lot.</para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><parameter>module:NAME-STREAM</parameter> (OBS 2.11 or later)</term>
        <listitem>
                <para>For enabling RedHat specific module support in repo md repostories. By default modules are not used, but
                      content can be made available by specifing the module name. For removing a module add a exclamation mark(!) as prefix.</para>
        </listitem>
       </varlistentry>
      </variablelist>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>ExportFilter: <replaceable>REGEX</replaceable> <replaceable>ARCH</replaceable></parameter></term>
    <listitem>
     <para>
      The export filter can be used to export build results from one
      architecture to others. This is required when one architecture needs
      packages from another architecture for building.
      The <replaceable>REGEX</replaceable> placeholder must match
      the resulting binary name of the package. It will export it to all listed
      scheduler architectures. Using a single dot will export it to the
      architecture which was used to build it. So not using a dot there will
      filter the package.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>FileProvides: <replaceable>FILE</replaceable> <replaceable>PACKAGES</replaceable></parameter></term>
    <listitem>
     <para> &obsa; ignores dependencies to files (instead of package names) by
      default. This is mostly done to reduce the amount of memory needed, as
      the package file lists take up a considerable amount of repository meta
      data. As a workaround, FileProvides can be used to tell the systems which
      packages contain a file. The File needs to have the full path.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>HostArch: <replaceable>HOST_ARCH</replaceable></parameter></term>
    <listitem>
     <para>
      This is used for cross builds. It defines the host architecture used
      for building, while the scheduler architecture remains the target
      architecture.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Ignore: <replaceable>PACKAGES</replaceable></parameter></term>
    <listitem>
     <para>
      Ignore can be used to break dependencies. This can be useful to
      reduce the number of needed packages or to break cyclic dependencies. Be
      careful with this feature, as breaking dependencies can have surprising
      results.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Ignore: <replaceable>PACKAGE_A</replaceable>:<replaceable>PACKAGES</replaceable></parameter></term>
    <listitem>
     <para>
      It is possible to define the ignore only for one package. This
      package must be listed first with a colon.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Keep: <replaceable>PACKAGES</replaceable></parameter></term>
    <listitem>
     <para>
      To eliminate build cycles the to-be-built package is not installed
      by default, even when it is required. Keep can be used to overwrite this
      behavior. It is usually needed for packages like <systemitem
       >make</systemitem> that are used to
      build itself. Preinstalled packages are automatically kept, as the
      package installation program needs to work all the time.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>OptFlags: <replaceable>TARGET_ARCH</replaceable> <replaceable>FLAGS</replaceable></parameter> (RPM only)</term>
    <listitem>
     <para>
      Optflags exports compiler flags to the build. They will only have an
      effect when the spec file is using $RPM_OPT_FLAGS. The target
      architecture may be * to affect all architectures.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Order: <replaceable>PACKAG_A</replaceable>:<replaceable>PACKAGE_B</replaceable></parameter></term>
    <listitem>
     <para>
      The build script takes care about the installation order if they
      are defined via dependencies inside of the packages. However, there
      might be dependency loops (reported during setup of the build system) or
      missing dependencies. The <parameter>Order</parameter> statement can
      be used then to give a hint where to break the loop.
     </para>
     <para>The package in <replaceable>PACKAGE_A</replaceable> will get
      installed before the package in <replaceable>PACKAGE_B</replaceable>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Patterntype: <replaceable>TYPES</replaceable></parameter></term>
    <listitem>
     <para>
      Defines the pattern format. Valid values are: none (default), ymp, comps.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Prefer: <replaceable>PACKAGES</replaceable></parameter></term>
    <listitem>
     <para>
      In case multiple packages satisfy a dependency, the OBS system will
      complain about that situation. This is unlike like most package managing
      tools, which just pick one of the package. Because one of OBS' goal is to
      provide reproducible builds, it reports an error in this case instead of
      choosing a random package. The Prefer: tag lists packages to be preferred
      in case a choice exists. When the package name is prefixed with a dash,
      this is treated as a de-prefer.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Prefer: <replaceable>PACKAGE_A</replaceable>:<replaceable>PACKAGES</replaceable></parameter></term>
    <listitem>
     <para>
      It is possible to define the prefer only when one package is creating
      the choice error. This package must be listed first with a colon.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Preinstall: <replaceable>PACKAGES</replaceable></parameter></term>
    <listitem>
     <para>
      Are needed to run the package installation program. These packages get
      unpacked before the VM gets started. Included scripts
      are <emphasis>not</emphasis> executed during this phase. However, these
      packages will get installed again inside of the VM including script
      execution.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>PublishFlag: <replaceable>FLAG</replaceable></parameter></term>
    <listitem>
     <para>
      Flags which modify the behaviour during repository generation.
     </para>
      <variablelist>
       <varlistentry>
        <term><parameter>create_empty</parameter> (OBS 2.11 or later)</term>
        <listitem>
          <para>Create a repository even with no content, but with meta data.</para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><parameter>noearlykiwipublish</parameter> (OBS 2.11 or later)</term>
        <listitem>
          <para>Only publish kiwi build results after entire repository has finished building. Without this kiwi
                build results get published immediatly after the build is finished.</para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><parameter>ympdist:NAME</parameter> (OBS 2.11 or later)</term>
        <listitem>
        <para>Defines the distversion to be used in group element of ymp files.
              This is used by the installer to check if the repository is suitable for the installed distribution.</para>
        </listitem>
       </varlistentry>
      </variablelist>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>PublishFilter: <replaceable>REGEXP</replaceable> [<replaceable>REGEXP</replaceable>]</parameter></term>
    <listitem>
     <para>
      Limits the published binary packages in public repositories. Packages
      that match any <replaceable>REGEXP</replaceable> will not be put into
      the exported repository. There can be only one line of
      PublishFilter for historic reasons. However, multiple
      <replaceable>REGEXP</replaceable> can be defined.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Repotype:  <replaceable>TYPE[:OPTIONS]</replaceable></parameter></term>
    <listitem>
     <para> Defines the repository format for published repositories. Valid
      values are: none, rpm-md, suse, debian, hdlist2, arch, staticlinks. The
      OPTIONS parameter depends on the repository type, for rpm-md the known
      options are 'legacy' to create the old rpm-md format, 'deltainfo' or
      'prestodelta' to create delta rpm packages, 'rsyncable' to use rsyncable
      gzip compression. To split the debug packages in an own published repository the option
      <literal>splitdebug:<replaceable>REPOSITORY_SUFFIX</replaceable></literal>
      can be appended, e.g.
     </para>
     <screen>Repotype: rpm-md splitdebug:-debuginfo</screen>
    <para>
      (the repository format may even be omitted to use the default type).
      This results in a debuginfo package repository being created in parallel to the
      package repository.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Required: <replaceable>PACKAGES</replaceable></parameter></term>
    <listitem>
     <para>
      Contain one or more packages that always get installed for package
      builds. A change in one of these packages triggers a new build.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Runscripts: <replaceable>PACKAGES</replaceable></parameter></term>
    <listitem>
     <para>
      Defines the scripts of preinstalled packages which needs to be executed
      directly after the preinstall phase, but before installing the
      remaining packages.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Substitute: <replaceable>PACKAGE_A</replaceable> <replaceable>PACKAGES</replaceable></parameter></term>
    <listitem>
     <para>
      It is possible to replace to BuildRequires with other packages.
      This will have only an effect on directly BuildRequired packages, not on
      indirectly required packages.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Support: <replaceable>PACKAGES</replaceable></parameter></term>
    <listitem>
     <para>
      Contain one or more packages which also get installed for package
      builds, but a change in one of the packages does not trigger
      an automatic rebuild.
     </para>
     <para>
      This is useful for packages that most likely do not influence the build
      result, for example <package>make</package> or <package>coreutils</package>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Target: <replaceable>TARGET_ARCH</replaceable></parameter> (RPM only)</term>
    <listitem>
     <para>Defines the target architecture. This can be used to build for i686
      on i586 schedulers for example.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Type: <replaceable>TYPE</replaceable></parameter></term>
    <listitem>
     <para>
      Build recipe type. This is the format of the file which provides the
      build description. This gets usually autodetected, but in some rare cases
      it can be set here to either one of these: spec, dsc, kiwi, livebuild,
      arch, preinstallimage.
     </para>
     <para>Defines the build recipe format. Valid values are currently: none, spec,
      dsc, arch, kiwi, preinstallimage. If no type is specified, OBS deduces a
      type from the binary type. </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>VMInstall: <replaceable>PACKAGES</replaceable></parameter></term>
    <listitem>
     <para>
      Like <parameter>Preinstall</parameter>, but these packages get only
      installed when a virtual machine like Xen or KVM is used for building.
      Usually  packages like <package>mount</package> are listed here.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>

 <sect1 xml:id="sec.prjconfig.macros">
  <title>Macro Section</title>
  <remark>toms 2017-08-18: TODO: Extend this section from https://en.opensuse.org/openSUSE:Build_Service_prjconf#Macros</remark>
  <para>
   Macros are defined at the end of the project configuration.
   The macro section is only used on RPM builds.
   <!--
    The content gets exported to be used by <command>rpmbuild</command>
   command during the build.
   It can be used to export a define using "%key value" lines.
   -->
  </para>
  <para>
   The project configuration knows two possible definitions:
  </para>
  <itemizedlist>
   <listitem>
    <formalpara>
     <title>%define Macro Definitions</title>
     <para>
      Starting with a <systemitem class="macro">%define</systemitem> line and
      are used in the project configuration only. These definitions are
      <emphasis>not</emphasis> available inside the build root.
     </para>
    </formalpara>
   </listitem>
   <listitem>
    <formalpara>
     <title>Other Macro Definitions</title>
     <para>
      Starting after the <systemitem class="macro">Macros:</systemitem> line
      and are exported into the <filename>.rpmmacros</filename> file of the
      build root. As such, these macro definitions can be used in a spec
      file.
     </para>
    </formalpara>
   </listitem>
  </itemizedlist>

  <sect2 xml:id="sec.prjconfig.macros.define">
   <title>Macros Used in Project Configuration Only</title>
   <para>
    Inside the project configuration use <systemitem class="macro">%define</systemitem>
    to define your macros. You can use all the features that RPM supports
    except you cannot define functions or call external commands.
   </para>
   <remark>toms 2017-08-23: the example in https://en.opensuse.org/openSUSE:Build_Service_prjconf#Macros
   is misleading. On the one side the Wiki says %define macros are only used
   inside the prj config, but on the other side it is used in the spec file.
   Confusing!
   </remark>
   <para>
    For example, you can define
   </para>
   <screen>%define _with_pulseaudio 1</screen>
  </sect2>
  <sect2 xml:id="sec.prjconfig.macros.macrosection">
   <title>Macros Used in Spec Files Only</title>
   <para>
    The macro definition in the project configuration is located at the end
    and has the following structure:
   </para>
   <example>
    <title>Structure of a Macro Definition</title>
    <screen>Macros:
  # add your macro definitions
:Macros</screen>
   </example>
   <para>
    Everything that starts with a hash mark (<literal>#</literal>) is
    considered a comment.
   </para>
   <para>
    The macro definition itself are defined without a <literal>%define</literal>
    keyword. Start with <literal>%macroname</literal>, for example:
   </para>
   <remark>toms 2017-08-23: find a good/better example than %_with_pulseaudio</remark>
   <screen>%</screen>
  </sect2>
 </sect1>
</chapter>
